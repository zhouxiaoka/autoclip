1
00:00:03,180 --> 00:00:03,420
嘿

2
00:00:03,420 --> 00:00:03,900
我是亚历克斯

3
00:00:03,900 --> 00:00:06,500
今天我在Anthropic负责云关系工作

4
00:00:06,500 --> 00:00:07,920
我们将讨论云代码相关内容

5
00:00:07,920 --> 00:00:09,300
我今天和同事一起

6
00:00:09,300 --> 00:00:09,710
凯特

7
00:00:09,710 --> 00:00:10,150
嘿

8
00:00:10,150 --> 00:00:10,790
我是凯特

9
00:00:10,790 --> 00:00:13,010
我是Claude Code的产品经理

10
00:00:13,010 --> 00:00:14,110
我想先开始讲

11
00:00:14,110 --> 00:00:18,170
谈论云代码的发布速度简直令人难以置信

12
00:00:18,170 --> 00:00:20,090
每次我打开终端

13
00:00:20,090 --> 00:00:23,910
总会有新功能或新工具供我使用

14
00:00:24,190 --> 00:00:26,910
你能带我看看团队从想法到发布给最终用户的流程吗

15
00:00:26,910 --> 00:00:30,750
从想法到真正交付给用户的过程

16
00:00:30,750 --> 00:00:31,290
是的

17
00:00:31,290 --> 00:00:34,650
COCO团队由极具产品思维的工程师组成

18
00:00:34,650 --> 00:00:37,390
许多功能都是自底向上开发的

19
00:00:37,390 --> 00:00:38,910
就像开发者自己

20
00:00:38,910 --> 00:00:41,110
非常希望拥有某个功能

21
00:00:41,110 --> 00:00:42,830
然后自己动手实现

22
00:00:42,830 --> 00:00:46,230
我们的流程不是写文档

23
00:00:46,230 --> 00:00:49,630
使用云代码原型功能非常快速

24
00:00:49,630 --> 00:00:53,010
很多时候人们直接原型化功能

25
00:00:53,010 --> 00:00:55,300
然后内部部署给Anthropic员工

26
00:00:55,300 --> 00:00:57,180
如果反响非常好

27
00:00:57,180 --> 00:01:00,780
这说明外部用户也会喜欢

28
00:01:00,780 --> 00:01:04,050
这也是我们对外发布的标准

29
00:01:04,050 --> 00:01:08,210
当然总有一些需要调整的功能

30
00:01:08,210 --> 00:01:09,450
需要做一些优化

31
00:01:09,450 --> 00:01:11,310
如果我们觉得

32
00:01:11,310 --> 00:01:13,470
Anthropic员工使用不多

33
00:01:13,470 --> 00:01:15,170
我们就重新设计

34
00:01:15,170 --> 00:01:16,350
然后说

35
00:01:16,350 --> 00:01:18,030
这个功能还能怎么改进

36
00:01:18,030 --> 00:01:20,370
当我们提到Anthropic的员工

37
00:01:20,370 --> 00:01:20,730
是的

38
00:01:20,730 --> 00:01:21,030
对

39
00:01:21,030 --> 00:01:21,490
对

40
00:01:22,090 --> 00:01:23,590
这真的很有趣

41
00:01:23,590 --> 00:01:24,990
我从未见过

42
00:01:24,990 --> 00:01:28,340
像Claude Code这样

43
00:01:28,340 --> 00:01:31,820
有如此强大的内部测试循环

44
00:01:31,820 --> 00:01:34,930
你认为这是刻意为之还是自然形成

45
00:01:34,930 --> 00:01:36,690
这是有意为之的

46
00:01:36,690 --> 00:01:41,310
这也是云代码效果显著的重要原因

47
00:01:41,310 --> 00:01:47,009
因为云代码功能原型开发非常便捷

48
00:01:47,009 --> 00:01:50,280
我们鼓励尽可能多做原型

49
00:01:50,280 --> 00:01:56,180
但很难准确预测开发者实际使用工具的方式

50
00:01:56,180 --> 00:01:59,479
因为开发者的工作流程差异很大

51
00:01:59,479 --> 00:02:00,679
所以很多时候

52
00:02:00,679 --> 00:02:03,820
即使从理论上知道你想做某件事，比如

53
00:02:03,820 --> 00:02:07,120
即使从理论上知道你想构建一个IDE集成

54
00:02:07,120 --> 00:02:10,889
仍然存在多种潜在的实现方式

55
00:02:10,889 --> 00:02:14,450
而所有原型设计都是唯一能真正感受

56
00:02:14,450 --> 00:02:17,110
产品如何融入实际工作流程的方法

57
00:02:17,110 --> 00:02:17,830
所以是的

58
00:02:17,830 --> 00:02:19,330
正是通过这种自用测试的过程

59
00:02:19,330 --> 00:02:22,270
我们决定推出哪个版本的功能

60
00:02:22,270 --> 00:02:22,810
我明白了

61
00:02:22,810 --> 00:02:24,690
其中还有一种

62
00:02:24,690 --> 00:02:26,110
近乎灵活的特性

63
00:02:26,110 --> 00:02:31,169
但终端二的约束条件也允许轻松添加

64
00:02:31,169 --> 00:02:31,969
新功能

65
00:02:31,969 --> 00:02:33,880
这我有所察觉，就像

66
00:02:33,880 --> 00:02:36,040
因为我们已经构建了基础模块

67
00:02:36,040 --> 00:02:38,320
比如命令行和相关功能，因此容易添加

68
00:02:38,320 --> 00:02:39,980
另一个在之上

69
00:02:39,980 --> 00:02:40,460
是的

70
00:02:40,460 --> 00:02:42,580
它完全是为了可定制化设计

71
00:02:42,580 --> 00:02:42,980
是的

72
00:02:42,980 --> 00:02:47,690
由于许多开发者熟悉终端

73
00:02:47,690 --> 00:02:51,300
使得新功能上手

74
00:02:51,300 --> 00:02:52,970
非常简便

75
00:02:52,970 --> 00:02:53,970
嗯

76
00:02:53,970 --> 00:02:55,290
例如

77
00:02:55,290 --> 00:02:56,770
对于像钩子功能

78
00:02:56,770 --> 00:03:01,840
这种能为四段代码事件增加确定性的功能

79
00:03:01,840 --> 00:03:03,180
因为每个人

80
00:03:03,180 --> 00:03:06,430
每位开发者都懂得编写脚本

81
00:03:06,430 --> 00:03:08,290
归根结底

82
00:03:08,290 --> 00:03:10,310
所有钩子本质上就是一个脚本

83
00:03:10,310 --> 00:03:14,140
因此无需学习新技术即可定制云代码

84
00:03:14,140 --> 00:03:16,960
你只需编写已熟悉的脚本

85
00:03:16,960 --> 00:03:20,140
然后将其添加到云代码事件中

86
00:03:20,140 --> 00:03:21,800
现在就有了确定性

87
00:03:21,800 --> 00:03:22,280
我们

88
00:03:22,280 --> 00:03:26,310
我们正努力在用户所在的位置提供支持

89
00:03:26,310 --> 00:03:27,510
或许用这个工具

90
00:03:27,510 --> 00:03:29,050
是的 嗯

91
00:03:29,050 --> 00:03:30,250
稍作转换话题

92
00:03:30,250 --> 00:03:32,570
在如此快速的迭代速度下

93
00:03:32,570 --> 00:03:37,190
云代码也保持着惊人的开发者增长 ah

94
00:03:38,190 --> 00:03:41,330
能否带我回顾一下这趟火箭之旅的感受

95
00:03:41,330 --> 00:03:44,380
我们如何看到不同开发者

96
00:03:44,380 --> 00:03:46,140
无论是初创公司还是个人

97
00:03:46,140 --> 00:03:48,769
甚至大型企业使用Claude

98
00:03:48,769 --> 00:03:53,129
云代码的一大魔力在于上手流程极其顺畅

99
00:03:54,329 --> 00:03:57,530
完成npm安装quad后

100
00:03:57,530 --> 00:04:00,690
几乎即插即用无需额外配置

101
00:04:00,690 --> 00:04:01,810
这确实是事实

102
00:04:01,810 --> 00:04:04,670
无论是独立开发者还是

103
00:04:04,670 --> 00:04:07,900
如果你是财富500强的工程师

104
00:04:07,900 --> 00:04:10,540
我认为这就是代码魔法的核心

105
00:04:10,540 --> 00:04:16,230
因为它可以访问所有本地工具和文件

106
00:04:16,230 --> 00:04:20,140
这似乎是一种非常奇特的思维模型

107
00:04:20,140 --> 00:04:22,420
你会看到不同的使用场景

108
00:04:22,420 --> 00:04:22,880
不过

109
00:04:22,880 --> 00:04:23,480
呃

110
00:04:23,480 --> 00:04:25,870
在中小公司和大企业之间

111
00:04:25,870 --> 00:04:30,280
我们发现小公司工程师更倾向于自主运行quad

112
00:04:30,280 --> 00:04:32,880
使用自动接受模式

113
00:04:32,880 --> 00:04:37,060
允许Claude自动修改无需逐个审批

114
00:04:37,060 --> 00:04:42,370
这些开发者还喜欢同时运行多个quad会话

115
00:04:42,370 --> 00:04:45,430
他们称之为多克隆

116
00:04:45,430 --> 00:04:51,150
你可能会看到人们同时打开六个quad会话

117
00:04:51,150 --> 00:04:54,090
每个可能处于不同的git工作区

118
00:04:54,090 --> 00:04:57,000
或不同的git仓库副本

119
00:04:57,000 --> 00:04:59,980
并分别进行管理

120
00:04:59,980 --> 00:05:03,520
每当有人暂停寻求反馈时

121
00:05:03,520 --> 00:05:07,220
他们会立即介入然后发送继续运行

122
00:05:07,220 --> 00:05:10,160
在另一端的大企业中

123
00:05:10,160 --> 00:05:13,460
工程师们更喜欢使用计划模式

124
00:05:13,460 --> 00:05:17,740
计划模式是让开发者告知Claude

125
00:05:17,740 --> 00:05:19,650
先暂停一下

126
00:05:19,650 --> 00:05:21,110
探索代码库

127
00:05:21,110 --> 00:05:27,590
理解架构并制定工程计划后再实际编写代码

128
00:05:27,590 --> 00:05:33,870
这对复杂任务非常有用

129
00:05:33,870 --> 00:05:35,910
回到多克隆概念

130
00:05:35,910 --> 00:05:38,070
我觉得这个概念很有趣

131
00:05:38,070 --> 00:05:39,060
呃

132
00:05:39,060 --> 00:05:43,480
我们或许早已想象到有人会这样做

133
00:05:43,480 --> 00:05:45,460
但可能有些意外

134
00:05:45,460 --> 00:05:46,180
呃

135
00:05:46,180 --> 00:05:49,080
在该领域还有其他模式吗

136
00:05:49,080 --> 00:05:49,560
哇

137
00:05:49,560 --> 00:05:51,250
这是一个真正出现的使用模式

138
00:05:51,250 --> 00:05:54,690
我们完全没想到会自然涌现

139
00:05:54,690 --> 00:05:57,179
因此我们调整了路线图

140
00:05:57,179 --> 00:05:57,759
是的

141
00:05:57,759 --> 00:06:00,299
我认为多克隆是最突出的

142
00:06:00,299 --> 00:06:04,390
因为这原本只是给高级用户的功能

143
00:06:04,390 --> 00:06:05,950
只有少数人会使用

144
00:06:05,950 --> 00:06:10,470
但实际上这是人们使用Claude的常见方式

145
00:06:10,470 --> 00:06:11,130
呃

146
00:06:11,130 --> 00:06:12,050
例如

147
00:06:12,050 --> 00:06:16,190
他们可能有一个仅提问的quad实例

148
00:06:16,190 --> 00:06:18,390
这个不直接修改代码

149
00:06:18,390 --> 00:06:20,810
在同一仓库中另一个quad实例

150
00:06:20,810 --> 00:06:21,390
嗯

151
00:06:21,390 --> 00:06:22,490
这确实是在编辑代码

152
00:06:22,490 --> 00:06:24,350
而且这两个不会互相干扰

153
00:06:24,350 --> 00:06:28,130
我们看到的其他情况是人们非常喜欢自定义clade代码

154
00:06:28,130 --> 00:06:28,860
呃

155
00:06:28,860 --> 00:06:31,560
用于处理专业任务

156
00:06:31,560 --> 00:06:36,220
所以我们看到有人在quad代码上构建sre代理

157
00:06:36,220 --> 00:06:36,760
呃

158
00:06:36,760 --> 00:06:38,060
安全代理

159
00:06:38,060 --> 00:06:40,140
事件响应代理

160
00:06:40,140 --> 00:06:41,840
这让我们意识到

161
00:06:41,840 --> 00:06:46,180
集成对于确保云代码正常运行至关重要

162
00:06:46,180 --> 00:06:50,990
因此我们一直在鼓励人们花更多时间向quad代码说明

163
00:06:50,990 --> 00:06:51,410
嘿

164
00:06:51,410 --> 00:06:54,260
这些是我们常用的命令行工具

165
00:06:54,260 --> 00:06:59,140
或设置远程mcp服务器以访问日志和工单管理软件

166
00:06:59,140 --> 00:07:01,240
当工程师自定义claude代码时

167
00:07:01,240 --> 00:07:04,590
这意味着他们在创建某些引擎吗

168
00:07:04,590 --> 00:07:07,240
还是在创建markdown文件

169
00:07:07,240 --> 00:07:08,620
比如claude md文件

170
00:07:08,620 --> 00:07:12,020
他们是如何创建这些不同类型代理的

171
00:07:12,020 --> 00:07:12,580
是的

172
00:07:12,580 --> 00:07:12,900
我认为

173
00:07:12,900 --> 00:07:15,930
我们看到人们自定义的最常见方式是

174
00:07:15,930 --> 00:07:18,670
大量投入quad md文件

175
00:07:18,670 --> 00:07:22,490
所以quadmt文件是我们的记忆概念

176
00:07:22,490 --> 00:07:26,190
这是向claude代码说明

177
00:07:26,190 --> 00:07:27,750
你们团队的目标是什么

178
00:07:27,750 --> 00:07:28,510
呃

179
00:07:28,510 --> 00:07:30,530
代码的架构方式

180
00:07:30,530 --> 00:07:33,590
代码库中的注意事项

181
00:07:33,590 --> 00:07:35,559
最佳实践

182
00:07:35,679 --> 00:07:42,430
投入quadmt我们听到大幅提升了输出质量

183
00:07:42,430 --> 00:07:47,639
人们自定义claw代码的另一种方式是添加自定义命令

184
00:07:47,639 --> 00:07:50,390
如果有你总是输入的提示

185
00:07:50,390 --> 00:07:52,510
可以将其添加到自定义命令中

186
00:07:52,510 --> 00:07:54,030
并且可以提交这些

187
00:07:54,030 --> 00:07:56,330
以便与团队共享

188
00:07:56,330 --> 00:07:59,400
还可以添加自定义钩子

189
00:07:59,400 --> 00:08:01,080
例如

190
00:08:01,080 --> 00:08:05,980
希望quad代码在提交前运行linz

191
00:08:05,980 --> 00:08:07,800
这对于钩子来说非常实用

192
00:08:07,800 --> 00:08:11,010
如果希望claude代码每次完成工作时发送Slack通知

193
00:08:11,010 --> 00:08:12,650
这就是创建钩子的最初灵感

194
00:08:12,650 --> 00:08:15,630
因此这些都是人们今天构建的自定义功能

195
00:08:15,630 --> 00:08:19,690
告诉我更多关于clocode sdk的信息

196
00:08:19,690 --> 00:08:22,630
clocode sdk是构建通用代理的绝佳方式

197
00:08:22,630 --> 00:08:25,770
clocode sdk提供了访问代理核心组件的权限

198
00:08:25,770 --> 00:08:31,140
包括可以自定义系统提示

199
00:08:31,140 --> 00:08:33,940
可以引入自有工具

200
00:08:33,940 --> 00:08:36,429
你可以自带自定义工具

201
00:08:36,429 --> 00:08:41,690
从SDK中获得的是一个核心基因循环

202
00:08:41,690 --> 00:08:44,540
我们处理用户的交互轮次

203
00:08:44,540 --> 00:08:47,180
并为您执行工具调用

204
00:08:47,180 --> 00:08:49,620
您必须使用我们的现有权限系统

205
00:08:49,620 --> 00:08:51,910
这样您无需从头构建

206
00:08:51,910 --> 00:08:55,450
我们还负责与底层API交互

207
00:08:55,450 --> 00:08:58,430
因此我们会确保自动重试机制

208
00:08:58,430 --> 00:09:00,319
遇到任何API错误时

209
00:09:00,334 --> 00:09:05,690
我们非常激进地优化提示词以确保请求的token高效性

210
00:09:05,690 --> 00:09:06,290
嗯

211
00:09:06,290 --> 00:09:07,570
如果您在原型开发

212
00:09:07,570 --> 00:09:09,290
从头构建一个代理

213
00:09:09,290 --> 00:09:11,010
如果您使用调用代码SDK

214
00:09:11,010 --> 00:09:16,120
您可以在三十分钟左右快速搭建出功能强大的系统

215
00:09:16,120 --> 00:09:19,100
我们看到很多人用它构建了很棒的应用

216
00:09:19,100 --> 00:09:19,840
嗯

217
00:09:19,840 --> 00:09:23,440
我们在GitHub开源了四元代码集成

218
00:09:23,440 --> 00:09:25,780
完全基于SDK构建

219
00:09:25,780 --> 00:09:29,000
人们已在此基础上开发了安全代理

220
00:09:29,000 --> 00:09:30,950
SRE代理

221
00:09:31,510 --> 00:09:32,990
事件响应代理

222
00:09:32,990 --> 00:09:35,030
这些都属于编码领域

223
00:09:35,030 --> 00:09:35,950
在非编码领域

224
00:09:35,950 --> 00:09:38,570
我们看到有人原型化法律代理

225
00:09:38,570 --> 00:09:40,070
合规代理

226
00:09:40,070 --> 00:09:44,790
这确实旨在成为满足所有代理需求的通用SDK

227
00:09:44,790 --> 00:09:46,270
这个SDK在我看来非常强大

228
00:09:46,270 --> 00:09:51,580
我觉得我们长期困在单次请求API的世界里

229
00:09:51,580 --> 00:09:51,960
是的

230
00:09:51,960 --> 00:09:55,240
现在我们正在迈向更高层次的抽象

231
00:09:55,240 --> 00:09:57,359
几乎要处理所有您提到的细节

232
00:09:57,359 --> 00:09:59,999
SDK将处理所有这些琐碎事项

233
00:09:59,999 --> 00:10:02,119
SDK未来的发展方向是什么

234
00:10:02,119 --> 00:10:03,850
接下来有什么计划

235
00:10:03,850 --> 00:10:06,010
我们非常看好这个SDK

236
00:10:06,010 --> 00:10:10,800
这是解锁新一代代理的关键

237
00:10:10,800 --> 00:10:11,380
嗯

238
00:10:11,380 --> 00:10:13,320
我们正在大力投入

239
00:10:13,320 --> 00:10:16,250
确保SDK成为构建代理的最佳工具

240
00:10:16,250 --> 00:10:17,130
嗯

241
00:10:17,130 --> 00:10:19,890
所有您在

242
00:10:19,890 --> 00:10:23,260
Claude代码中拥有的优秀功能都将内置在SDK中

243
00:10:23,260 --> 00:10:25,880
您可以自行选择保留哪些功能

244
00:10:25,880 --> 00:10:26,240
所以

245
00:10:26,240 --> 00:10:26,940
例如

246
00:10:26,940 --> 00:10:30,040
如果您的代理需要待办事项列表那就太好了

247
00:10:30,040 --> 00:10:32,930
系统已内置待办事项工具

248
00:10:32,930 --> 00:10:34,270
如果您不需要

249
00:10:34,270 --> 00:10:36,850
只需轻松删除该工具即可

250
00:10:36,850 --> 00:10:38,860
如果您的代理需要编辑文件

251
00:10:38,860 --> 00:10:39,420
嗯

252
00:10:39,420 --> 00:10:41,020
例如更新其记忆

253
00:10:41,020 --> 00:10:42,540
开箱即得

254
00:10:42,540 --> 00:10:44,020
如果你决定

255
00:10:44,020 --> 00:10:44,620
好的

256
00:10:44,620 --> 00:10:49,840
嗯，我的不会以不同方式编辑文件

257
00:10:49,840 --> 00:10:51,920
你可以自行实现

258
00:10:51,920 --> 00:10:52,480
好的

259
00:10:52,480 --> 00:10:54,670
极其可定制

260
00:10:54,670 --> 00:10:56,410
基本上是通用型

261
00:10:56,410 --> 00:10:58,550
即可以替换系统提示

262
00:10:58,550 --> 00:11:00,330
或替换为你自己的工具

263
00:11:00,330 --> 00:11:01,850
然后自然嵌入

264
00:11:01,850 --> 00:11:02,170
是的

265
00:11:02,170 --> 00:11:03,590
到你正在构建的任何事物

266
00:11:03,590 --> 00:11:06,730
无论是完全不同的领域如代码

267
00:11:06,730 --> 00:11:07,050
是的

268
00:11:07,050 --> 00:11:09,790
太棒了，我真的很期待看到人们如何在此基础上开发

269
00:11:09,790 --> 00:11:10,609
我觉得像

270
00:11:10,609 --> 00:11:14,950
尤其是对于只想快速原型化代理的人

271
00:11:14,950 --> 00:11:15,790
这就像

272
00:11:15,790 --> 00:11:18,610
我认为这是最快上手的方式

273
00:11:18,610 --> 00:11:23,370
我们几乎花了一年时间完善这个框架

274
00:11:23,370 --> 00:11:25,970
这就是云端代码运行的同一框架

275
00:11:25,970 --> 00:11:33,160
如果你想直接进入代理所需的具体集成

276
00:11:33,160 --> 00:11:34,920
并立即进入

277
00:11:34,920 --> 00:11:41,170
只需调整系统提示以向代理传递问题背景

278
00:11:41,170 --> 00:11:44,350
而不必处理代理循环

279
00:11:44,350 --> 00:11:48,990
这是规避通用框架的最佳方式

280
00:11:48,990 --> 00:11:54,279
只需添加你的专属功能即可，好吧

281
00:11:54,279 --> 00:11:54,799
你在这里听到了

282
00:11:54,799 --> 00:11:57,719
现在必须去构建SDK了

283
00:11:57,719 --> 00:12:01,440
我很好奇大家如何使用Clade代码的技巧

284
00:12:01,440 --> 00:12:04,240
以及我们可以与开发者分享的最佳实践

285
00:12:04,240 --> 00:12:08,850
在使用云端代码或任何代理工具时

286
00:12:09,210 --> 00:12:15,240
最重要的是明确向工具传达目标

287
00:12:15,240 --> 00:12:19,540
很多人认为提示是魔法般的东西

288
00:12:19,540 --> 00:12:21,480
但其实并非如此

289
00:12:21,480 --> 00:12:22,480
嗯

290
00:12:22,480 --> 00:12:24,260
这非常关乎

291
00:12:24,260 --> 00:12:25,200
好的

292
00:12:25,200 --> 00:12:28,620
我是否清晰表达了目的

293
00:12:28,620 --> 00:12:34,970
我的任务目标及如何评估任务输出

294
00:12:34,970 --> 00:12:38,050
设计系统中的任何约束

295
00:12:38,050 --> 00:12:43,069
通常当你能清晰传达这些内容时

296
00:12:43,069 --> 00:12:45,269
云端代码就能执行

297
00:12:45,269 --> 00:12:46,669
或直接告知你

298
00:12:46,669 --> 00:12:47,229
好的

299
00:12:47,229 --> 00:12:49,129
这个功能我无法实现

300
00:12:49,129 --> 00:12:53,290
因为ABC，你可以尝试DEF替代

301
00:12:53,290 --> 00:12:54,830
所以这完全取决于沟通

302
00:12:54,830 --> 00:12:57,410
就像你和另一个工程师合作一样

303
00:12:57,410 --> 00:12:57,850
是的

304
00:12:57,850 --> 00:13:00,520
完全没错，还有另一件事是

305
00:13:00,520 --> 00:13:02,840
如果你注意到Coco做了些奇怪的事

306
00:13:02,840 --> 00:13:03,480
嗯

307
00:13:03,480 --> 00:13:05,150
你完全可以直接询问它

308
00:13:05,150 --> 00:13:06,910
为什么我想这样做

309
00:13:06,910 --> 00:13:08,830
它可能会告诉你类似

310
00:13:08,830 --> 00:13:09,110
好的

311
00:13:09,110 --> 00:13:11,050
当时有件事让MD注意到这一点

312
00:13:11,050 --> 00:13:13,050
或者我在这个文件里读到了内容

313
00:13:13,050 --> 00:13:15,570
这给了我这样的印象

314
00:13:15,570 --> 00:13:17,850
这样你实际上可以使用

315
00:13:17,850 --> 00:13:19,370
像与Claude对话

316
00:13:19,370 --> 00:13:20,590
作为调试的方法

317
00:13:20,590 --> 00:13:22,030
并不总是有效

318
00:13:22,030 --> 00:13:22,630
但

319
00:13:22,630 --> 00:13:23,190
嗯

320
00:13:23,190 --> 00:13:24,550
我觉得 definitely 值得尝试

321
00:13:24,550 --> 00:13:29,130
这就像我们用云代码调试Claude的常见技巧

322
00:13:29,130 --> 00:13:29,670
是的

323
00:13:29,670 --> 00:13:30,070
是的

324
00:13:30,070 --> 00:13:32,610
就像和人类协作时

325
00:13:32,610 --> 00:13:34,230
如果他们说你没预料到的话

326
00:13:34,230 --> 00:13:34,850
你可能会觉得

327
00:13:34,850 --> 00:13:35,490
哦，这很有趣

328
00:13:35,490 --> 00:13:37,380
是什么让你有这样的印象

329
00:13:37,380 --> 00:13:39,120
你为什么这么想

330
00:13:39,120 --> 00:13:41,200
我觉得和代理也能这样互动

331
00:13:41,200 --> 00:13:42,100
这太棒了

332
00:13:42,100 --> 00:13:43,040
好吧Kat

333
00:13:43,040 --> 00:13:43,620
这次交流非常棒

334
00:13:43,620 --> 00:13:45,000
真的很感谢你的时间

335
00:13:45,000 --> 00:13:46,480
感谢邀请我

