嘿 我是亚历克斯 今天我在Anthropic负责云关系工作 我们将讨论云代码相关内容 我今天和同事一起 凯特 嘿 我是凯特 我是Claude Code的产品经理 我想先开始讲 谈论云代码的发布速度简直令人难以置信 每次我打开终端 总会有新功能或新工具供我使用 你能带我看看团队从想法到发布给最终用户的流程吗 从想法到真正交付给用户的过程 是的 COCO团队由极具产品思维的工程师组成 许多功能都是自底向上开发的 就像开发者自己 非常希望拥有某个功能 然后自己动手实现 我们的流程不是写文档 使用云代码原型功能非常快速 很多时候人们直接原型化功能 然后内部部署给Anthropic员工 如果反响非常好 这说明外部用户也会喜欢 这也是我们对外发布的标准 当然总有一些需要调整的功能 需要做一些优化 如果我们觉得 Anthropic员工使用不多 我们就重新设计 然后说 这个功能还能怎么改进 当我们提到Anthropic的员工 是的 对 对 这真的很有趣 我从未见过 像Claude Code这样 有如此强大的内部测试循环 你认为这是刻意为之还是自然形成 这是有意为之的 这也是云代码效果显著的重要原因 因为云代码功能原型开发非常便捷 我们鼓励尽可能多做原型 但很难准确预测开发者实际使用工具的方式 因为开发者的工作流程差异很大 所以很多时候 即使从理论上知道你想做某件事，比如 即使从理论上知道你想构建一个IDE集成 仍然存在多种潜在的实现方式 而所有原型设计都是唯一能真正感受 产品如何融入实际工作流程的方法 所以是的 正是通过这种自用测试的过程 我们决定推出哪个版本的功能 我明白了 其中还有一种 近乎灵活的特性 但终端二的约束条件也允许轻松添加 新功能 这我有所察觉，就像 因为我们已经构建了基础模块 比如命令行和相关功能，因此容易添加 另一个在之上 是的 它完全是为了可定制化设计 是的 由于许多开发者熟悉终端 使得新功能上手 非常简便 嗯 例如 对于像钩子功能 这种能为四段代码事件增加确定性的功能 因为每个人 每位开发者都懂得编写脚本 归根结底 所有钩子本质上就是一个脚本 因此无需学习新技术即可定制云代码 你只需编写已熟悉的脚本 然后将其添加到云代码事件中 现在就有了确定性 我们 我们正努力在用户所在的位置提供支持 或许用这个工具 是的 嗯 稍作转换话题 在如此快速的迭代速度下 云代码也保持着惊人的开发者增长 ah 能否带我回顾一下这趟火箭之旅的感受 我们如何看到不同开发者 无论是初创公司还是个人 甚至大型企业使用Claude 云代码的一大魔力在于上手流程极其顺畅 完成npm安装quad后 几乎即插即用无需额外配置 这确实是事实 无论是独立开发者还是 如果你是财富500强的工程师 我认为这就是代码魔法的核心 因为它可以访问所有本地工具和文件 这似乎是一种非常奇特的思维模型 你会看到不同的使用场景 不过 呃 在中小公司和大企业之间 我们发现小公司工程师更倾向于自主运行quad 使用自动接受模式 允许Claude自动修改无需逐个审批 这些开发者还喜欢同时运行多个quad会话 他们称之为多克隆 你可能会看到人们同时打开六个quad会话 每个可能处于不同的git工作区 或不同的git仓库副本 并分别进行管理 每当有人暂停寻求反馈时 他们会立即介入然后发送继续运行 在另一端的大企业中 工程师们更喜欢使用计划模式 计划模式是让开发者告知Claude 先暂停一下 探索代码库 理解架构并制定工程计划后再实际编写代码 这对复杂任务非常有用 回到多克隆概念 我觉得这个概念很有趣 呃 我们或许早已想象到有人会这样做 但可能有些意外 呃 在该领域还有其他模式吗 哇 这是一个真正出现的使用模式 我们完全没想到会自然涌现 因此我们调整了路线图 是的 我认为多克隆是最突出的 因为这原本只是给高级用户的功能 只有少数人会使用 但实际上这是人们使用Claude的常见方式 呃 例如 他们可能有一个仅提问的quad实例 这个不直接修改代码 在同一仓库中另一个quad实例 嗯 这确实是在编辑代码 而且这两个不会互相干扰 我们看到的其他情况是人们非常喜欢自定义clade代码 呃 用于处理专业任务 所以我们看到有人在quad代码上构建sre代理 呃 安全代理 事件响应代理 这让我们意识到 集成对于确保云代码正常运行至关重要 因此我们一直在鼓励人们花更多时间向quad代码说明 嘿 这些是我们常用的命令行工具 或设置远程mcp服务器以访问日志和工单管理软件 当工程师自定义claude代码时 这意味着他们在创建某些引擎吗 还是在创建markdown文件 比如claude md文件 他们是如何创建这些不同类型代理的 是的 我认为 我们看到人们自定义的最常见方式是 大量投入quad md文件 所以quadmt文件是我们的记忆概念 这是向claude代码说明 你们团队的目标是什么 呃 代码的架构方式 代码库中的注意事项 最佳实践 投入quadmt我们听到大幅提升了输出质量 人们自定义claw代码的另一种方式是添加自定义命令 如果有你总是输入的提示 可以将其添加到自定义命令中 并且可以提交这些 以便与团队共享 还可以添加自定义钩子 例如 希望quad代码在提交前运行linz 这对于钩子来说非常实用 如果希望claude代码每次完成工作时发送Slack通知 这就是创建钩子的最初灵感 因此这些都是人们今天构建的自定义功能 告诉我更多关于clocode sdk的信息 clocode sdk是构建通用代理的绝佳方式 clocode sdk提供了访问代理核心组件的权限 包括可以自定义系统提示 可以引入自有工具 你可以自带自定义工具 从SDK中获得的是一个核心基因循环 我们处理用户的交互轮次 并为您执行工具调用 您必须使用我们的现有权限系统 这样您无需从头构建 我们还负责与底层API交互 因此我们会确保自动重试机制 遇到任何API错误时 我们非常激进地优化提示词以确保请求的token高效性 嗯 如果您在原型开发 从头构建一个代理 如果您使用调用代码SDK 您可以在三十分钟左右快速搭建出功能强大的系统 我们看到很多人用它构建了很棒的应用 嗯 我们在GitHub开源了四元代码集成 完全基于SDK构建 人们已在此基础上开发了安全代理 SRE代理 事件响应代理 这些都属于编码领域 在非编码领域 我们看到有人原型化法律代理 合规代理 这确实旨在成为满足所有代理需求的通用SDK 这个SDK在我看来非常强大 我觉得我们长期困在单次请求API的世界里 是的 现在我们正在迈向更高层次的抽象 几乎要处理所有您提到的细节 SDK将处理所有这些琐碎事项 SDK未来的发展方向是什么 接下来有什么计划 我们非常看好这个SDK 这是解锁新一代代理的关键 嗯 我们正在大力投入 确保SDK成为构建代理的最佳工具 嗯 所有您在 Claude代码中拥有的优秀功能都将内置在SDK中 您可以自行选择保留哪些功能 所以 例如 如果您的代理需要待办事项列表那就太好了 系统已内置待办事项工具 如果您不需要 只需轻松删除该工具即可 如果您的代理需要编辑文件 嗯 例如更新其记忆 开箱即得 如果你决定 好的 嗯，我的不会以不同方式编辑文件 你可以自行实现 好的 极其可定制 基本上是通用型 即可以替换系统提示 或替换为你自己的工具 然后自然嵌入 是的 到你正在构建的任何事物 无论是完全不同的领域如代码 是的 太棒了，我真的很期待看到人们如何在此基础上开发 我觉得像 尤其是对于只想快速原型化代理的人 这就像 我认为这是最快上手的方式 我们几乎花了一年时间完善这个框架 这就是云端代码运行的同一框架 如果你想直接进入代理所需的具体集成 并立即进入 只需调整系统提示以向代理传递问题背景 而不必处理代理循环 这是规避通用框架的最佳方式 只需添加你的专属功能即可，好吧 你在这里听到了 现在必须去构建SDK了 我很好奇大家如何使用Clade代码的技巧 以及我们可以与开发者分享的最佳实践 在使用云端代码或任何代理工具时 最重要的是明确向工具传达目标 很多人认为提示是魔法般的东西 但其实并非如此 嗯 这非常关乎 好的 我是否清晰表达了目的 我的任务目标及如何评估任务输出 设计系统中的任何约束 通常当你能清晰传达这些内容时 云端代码就能执行 或直接告知你 好的 这个功能我无法实现 因为ABC，你可以尝试DEF替代 所以这完全取决于沟通 就像你和另一个工程师合作一样 是的 完全没错，还有另一件事是 如果你注意到Coco做了些奇怪的事 嗯 你完全可以直接询问它 为什么我想这样做 它可能会告诉你类似 好的 当时有件事让MD注意到这一点 或者我在这个文件里读到了内容 这给了我这样的印象 这样你实际上可以使用 像与Claude对话 作为调试的方法 并不总是有效 但 嗯 我觉得 definitely 值得尝试 这就像我们用云代码调试Claude的常见技巧 是的 是的 就像和人类协作时 如果他们说你没预料到的话 你可能会觉得 哦，这很有趣 是什么让你有这样的印象 你为什么这么想 我觉得和代理也能这样互动 这太棒了 好吧Kat 这次交流非常棒 真的很感谢你的时间 感谢邀请我